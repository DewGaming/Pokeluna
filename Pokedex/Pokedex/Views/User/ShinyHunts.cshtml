@model Pokedex.Models.ShinyHuntsViewModel;
@using MoreLinq;
@using Pokedex.DataAccess.Models;
@using System.Collections.Generic;
@using System.Net;
@{
    ViewBag.Title = "Shiny Hunts";
    ViewBag.Description = "Keep track of all of you current and successful shiny hunts!";
    List<ShinyHunt> incompleteHunts = new List<ShinyHunt>();
    List<ShinyHunt> completeHunts = new List<ShinyHunt>();
    List<Game> uncapturedGames = new List<Game>();
    List<Game> capturedGames = new List<Game>();
    incompleteHunts = Model.AllShinyHunts.Where(x => !x.IsCaptured).ToList();
    completeHunts = Model.AllShinyHunts.Where(x => x.IsCaptured).ToList();
    uncapturedGames = @Model.EdittedGames.Where(x => incompleteHunts.DistinctBy(x => x.Game).Any(y => y.GameId == x.Id)).OrderBy(x => x.ReleaseDate).ThenBy(x => x.Id).ToList();
    capturedGames = @Model.EdittedGames.Where(x => completeHunts.DistinctBy(x => x.Game).Any(y => y.GameId == x.Id)).OrderBy(x => x.ReleaseDate).ThenBy(x => x.Id).ToList();
}

@section styles
{
    <link href="~/css/pageLookup.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/css/shinyHunts.css" rel="stylesheet" asp-append-version="true" />
}

@section scripts
{
    <script src="~/js/pageLookup.js" asp-append-version="true"></script>
    <script src="~/js/shinyHunts.js" asp-append-version="true"></script>
    <script>
        $(document).on("keyup", function (e) {
            if (!$(".incompletedHunts").hasClass("hide")) {
                var key = e.which - 49;
                if (key >= 48 && key <= 56) {
                    key -= 48;
                }

                if (key >= 0 && key <= 8) {
                    var hunt = $(".grid-container").children().not(".hide")[key];
                    $(hunt).find('.encounterIncrease').trigger('click');
                }
            }
        });
    </script>
}

<p class="shinyHuntButtons">
    @if (!Model.IsShared)
    {
        <a class="btn btn-primary" href="@this.Url.Action("StartHunt", "ShinyHunt")" role="button">Start New Hunt</a>
        <a class="btn btn-primary" href="@this.Url.Action("AddCompletedHunt", "ShinyHunt")" role="button">Add Completed Hunt</a>
    }
    <button class="currentlyHuntingButton btn btn-primary hide" onclick="hideComplete()">View In-Progress Shiny Hunts</button>
    @if (completeHunts.Count > 0)
    {
        <button class="completedHuntsButton btn btn-primary" onclick="hideIncomplete()">View Successful Shiny Hunts</button>
    }
    @if (!Model.IsShared)
    {
        <a class="sharePage btn btn-primary" href="@this.Url.Action("ShinyHunts", "User", new { username = @Model.Username.ToLower() })" target="_blank">Share With Others</a>
    }
</p>

<div class="pageButtons uncapturedGamesList">
    <button class="gameButton pinnedHunts@(incompleteHunts.Count(x => x.IsPinned) > 0 ? " active" : " hide")" id="GamePin" onclick="lookupHuntsInGame(this, 'Pin')">Pinned Hunts</button>
    <button class="gameButton incompleteAllGames@(incompleteHunts.Count(x => x.IsPinned) > 0 ? "" : " active")" id="Game0" onload="lookupHuntsInGame(this, '0')" onclick="lookupHuntsInGame(this, '0')">All Games</button>
    @foreach (var g in uncapturedGames)
    {
        string gameColors = string.Concat(g.GameColor, " 50%, ");
        if (@Model.UnedittedGames.Where(x => x.ReleaseDate == g.ReleaseDate).Count() > 1 && g.Name != "Fire Red" && g.Name != "Leaf Green")
        {
            gameColors = string.Concat(gameColors, @Model.UnedittedGames.Where(x => x.ReleaseDate == g.ReleaseDate).ToList()[1].GameColor, " 50%)");
        }
        else
        {
            gameColors = string.Concat(gameColors, g.GameColor, " 50%)");
        }

        <button style="@(g.GameColor != string.Empty ? string.Concat("background: linear-gradient(135deg, ", gameColors) : string.Empty)" class="gameButton" id="Game@(g.Id)" onclick="lookupHuntsInGame(this, '@g.Id')">@g.Name</button>
    }
</div>

<div class="pageButtons capturedGamesList hide">
    <button class="gameButton completeAllGames active" id="Game0" onclick="lookupHuntsInGame(this, '0')">All Games</button>
    @foreach (var g in capturedGames)
    {
        string gameColors = string.Concat(g.GameColor, " 50%, ");
        if (@Model.UnedittedGames.Where(x => x.ReleaseDate == g.ReleaseDate).Count() > 1 && g.Name != "Fire Red" && g.Name != "Leaf Green")
        {
            gameColors = string.Concat(gameColors, @Model.UnedittedGames.Where(x => x.ReleaseDate == g.ReleaseDate).ToList()[1].GameColor, " 50%)");
        }
        else
        {
            gameColors = string.Concat(gameColors, g.GameColor, " 50%)");
        }

        <button style="@(g.GameColor != string.Empty ? string.Concat("background: linear-gradient(135deg, ", gameColors) : string.Empty)" class="gameButton" id="Game@(g.Id)" onclick="lookupHuntsInGame(this, '@g.Id')">@g.Name</button>
    }
</div>

@if (incompleteHunts.Count() > 0)
{
    <div class="page active generation pokemonList incompletedHunts">
        <div class="grid-container">
            @foreach (var s in incompleteHunts)
            {
                <div class="Hunt@(s.Id) HuntGame@(s.GameId)@(incompleteHunts.Count(x => x.IsPinned) > 0 ? (s.IsPinned ? " HuntGamePin" : " hide") : "") shadowed @s.Pokemon.Name">
                    <div class="pokemonDetails">
                        <div class="pokemonImages">
                            <div class="bonusImages">
                                @if (s.HasShinyCharm)
                                {
                                    <img loading="lazy" class="shinyCharm pokemonListPicture" title="Shiny Charm Used" src="@Url.Content(string.Concat(@Model.AppConfig.WebUrl, @Model.AppConfig.GeneralImageUrl, "shinyCharm.png"))">
                                }
                            </div>
                            <a href="@this.Url.Action("PokemonWithOnlyId", "Home", new { pokemonId = @s.Pokemon.Id, generationId = @s.Game.GenerationId })" target="_blank">
                                <img loading="lazy" class="pokemonListPicture pokemonShinyHuntPokemon" title="PokÃ©mon: @s.Pokemon.Name@((s.Nickname != null) ? string.Concat(" (", s.Nickname, ")") : "")" alt="@s.Pokemon.Name Shiny Image" src="@Url.Content(string.Concat(@Model.AppConfig.WebUrl, @Model.AppConfig.ShinyGridImageUrl, s.Pokemon.Id, ".png"))" />
                            </a>
                        </div>
                        <div class="description">
                            @if (!Model.IsShared)
                            {
                                <p onclick="togglePin('@s.Id')" class="@(s.IsPinned ? "pinned" : "pin")">ðŸ“Œ</p>
                            }
                            <p><b>@s.Pokemon.Name</b></p>
                            <p class="gameHuntedIn"><b>Game: </b>@s.Game.Name</p>
                            <p><b>Hunting Method: </b>@s.HuntingMethod.Name</p>
                            <p class="encounterIncrement@(Model.IsShared ? "" : " pointer")" id="@s.Id"><b>Increment Amount: </b><span class="increments">@s.IncrementAmount</span></p>
                            @if (@s.HuntingMethodId == 4 || @s.HuntingMethodId == 5 )
                            {
                                <p class="currentEncounters@(Model.IsShared ? "" : " pointer")" id="@s.Id"><b>Eggs: </b><span class="encounters">@s.CurrentPhaseEncounters</span></p>
                            }
                            else
                            {
                                <p class="currentEncounters@(Model.IsShared ? "" : " pointer")" id="@s.Id"><b>@(s.Phases > 1 ? "Current Phase " : "")Encounters: </b><span class="encounters">@s.CurrentPhaseEncounters</span></p>
                            }
                            <p class="phaseCounter@(Model.IsShared ? "" : " pointer")@(s.Phases > 1 ? "" : " hide")" id="@s.Id"><b>Current Phase: </b><span class="phases">@s.Phases</span></p>
                        </div>
                    </div>
                    @if (!Model.IsShared)
                    {
                        <div class="encounterButtons">
                            <button class="phaseIncrease btn orangeButton" onclick="incrementPhase('@s.Id')">Increase Phases</button>
                            <button class="encounterIncrease btn btn-primary" onclick="incrementEncounter('@s.Id')">Increase Encounters</button>
                        </div>
                        <hr class="buttonSeparator">
                        <div class="shinyFoundButtons">
                            <a class="shinyFound btn btn-success" href="@this.Url.Action("PhaseShinyFound", "ShinyHunt", new { shinyHuntId = @s.Id })" role="button">Phase Shiny Found</a>
                            <a class="shinyFound btn btn-success" href="@this.Url.Action("ShinyFound", "ShinyHunt", new { shinyHuntId = @s.Id })" role="button">Target Shiny Found</a>
                        </div>
                        <hr class="buttonSeparator">
                        <div class="huntUncapturedButtons">
                            <a class="btn orangeButton" href="@this.Url.Action("EditIncompleteShinyHunt", "ShinyHunt", new { shinyHuntId = @s.Id })" role="button">Modify Shiny Hunt</a>
                            <button class="btn btn-danger abandonHunt" onclick="abandonHunt(@s.Id, '@s.Pokemon.Name')">Abandon Hunt</button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@if (completeHunts.Count > 0)
{
    <div class="page generation pokemonList completedHunts hide">
        <h5 class="pokemonCount">Total Shinies Found: <span class="shiniesFoundCount"></span></h5>
        <div class="grid-container">
            @foreach (var s in Model.AllShinyHunts.Where(x => x.IsCaptured).OrderBy(x => x.Pokemon.PokedexNumber).ThenBy(x => x.PokemonId).ThenBy(x => x.DateOfCapture).ThenBy(x => x.Id).ToList())
            {
                Model.ShinyHunt = s;
                @await Html.PartialAsync("_FillCompletedShinyHunt", @Model);
            }
        </div>
    </div>
}

@if (Model.AllShinyHunts.Count() == 0)
{
    <div class="noShinyHunts">No hunts have been started yet.</div>
}