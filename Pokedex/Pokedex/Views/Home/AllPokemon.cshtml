@model List<Pokedex.DataAccess.Models.Game>;
@{
    Layout = "_Layout";
    ViewBag.Title = "Pokémon List";
    ViewBag.Description = "Lookup different Pokémon stats, separated by different generations!";
    string gameColors = string.Empty;
}

@section styles
{
    <link href="/css/pageLookup.css" rel="stylesheet" type="text/css" />
    <link href="/css/typeChart.css" rel="stylesheet" type="text/css" />
    <link href="/css/pokemonPage.css" rel="stylesheet" type="text/css" />
    <link href="/css/ajaxSpinner.css" rel="stylesheet" type="text/css" />
    <style>
        .pokemonImages {
            perspective: 720px;
            position: relative;
            height: 150px;
        }

        .front, .back {
            backface-visibility: hidden;
            transform-style: preserve-3d;
            width: 100%;
            transition: all 0.5s ease-out 0s;
        }

        .front {
            z-index: 1;
            position: absolute;
            transform: rotateY(0deg);
        }

        .back {
            z-index: 0;
            position: relative;
            transform: rotateY(-180deg);
        }

        .pokemonListPicture {
            backface-visibility: hidden;
        }

        .generations {
            margin-bottom: 0px !important;
        }
    </style>
}

@section scripts
{
    <script src="/js/pageLookup.js"></script>
}

<p>
    @if (this.User.IsInRole("Owner"))
    {
        <a class="btn btn-primary" href="@this.Url.Action("Pokemon", "Add")" role="button">Add Pokémon</a>
    }
</p>

<div class="generations">
    @foreach (var id in Model.Select(x => x.GenerationId).Distinct().ToList())
    {
        if (id == 7)
        {
            gameColors = string.Concat(@Model.Where(x => x.GenerationId == id).ToList()[1].GameColor, " 50%, ", @Model.Where(x => x.GenerationId == id).ToList()[2].GameColor, " 50%)");
        }
        else
        {
            gameColors = string.Concat(@Model.Where(x => x.GenerationId == id).ToList()[0].GameColor, " 50%, ", @Model.Where(x => x.GenerationId == id).ToList()[1].GameColor, " 50%)");
        }

        <button style="@(Model.First(x => x.GenerationId == id).GameColor != string.Empty ? string.Concat("background: linear-gradient(135deg, ", gameColors) : string.Empty)" id="Generation@(id)" onclick="lookupGeneration('@id')">Generation @id</button>
    }
</div>

<div class="overlay">
    <div class="cv-spinner">
        <span class="spinner"></span>
    </div>
</div>

<div class="page generation pokemonList"></div>