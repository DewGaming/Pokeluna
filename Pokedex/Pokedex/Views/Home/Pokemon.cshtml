@using Pokedex.Models;
@using Pokedex.DataAccess.Models;
@using System.Collections.Generic;
@using MoreLinq;
@model Pokedex.Models.AdminPokemonDropdownViewModel
@{
    Layout = "_Layout";
    string style = string.Empty;
    ViewBag.Title = @Model.PokemonList.FirstOrDefault().Pokemon.Name;
    ViewBag.Description = string.Concat("View the information for the ", @Model.PokemonList.FirstOrDefault().Pokemon.Classification.Name, ", ", @Model.PokemonList.FirstOrDefault().Pokemon.Name, "!");
    ViewBag.Image = @Url.Content(string.Concat(@Model.PokemonList.FirstOrDefault().AppConfig.WebUrl, @Model.PokemonList.FirstOrDefault().AppConfig.OfficialPokemonImageUrl, @Model.PokemonList.FirstOrDefault().Pokemon.Id, ".png"));
    AdminPokemonViewModel adminPokemon = null;
    Evolution preEvolution = null;
    int[] generations = null;
    if (this.User.IsInRole("Admin"))
    {
        adminPokemon = new AdminPokemonViewModel() { DropdownViewModel = Model.AdminDropdown.DropdownViewModel };
    }
}

@section styles
{
    <link href="/css/pageLookup.css" rel="stylesheet" type="text/css" />
    <link href="/css/typeChart.css" rel="stylesheet" type="text/css" />
    <link href="/css/pokemonPage.css" rel="stylesheet" type="text/css" />
    <link class="tabIcon" rel="icon" type="image/png" href="@Url.Content(string.Concat(@Model.PokemonList.FirstOrDefault().AppConfig.WebUrl, @Model.PokemonList.FirstOrDefault().AppConfig.FaviconImageUrl, @Model.PokemonId, ".png"))" />

    <style>
        .surroundingPokemon {
            margin: 5px 0;
        }

        .mb-4 {
            margin-bottom: 0 !important;
        }

        .effectivenessChart td {
            border-width: 0px;
        }

        .generations {
            display: none;
        }

        .generations button {
            border-top: 0;
        }

        .pokemonImage h4 {
            text-align: center;
            font-weight: bold;
        }
        
        .pokemonImage {
            perspective: 720px;
            position: relative;
        }

        .front, .back {
            backface-visibility: hidden;
            transform-style: preserve-3d;
            width: 100%;
            transition: all 0.5s ease-out 0s;
        }

        .front {
            z-index: 1;
            position: absolute;
            transform: rotateY(0deg);
        }

        .back {
            z-index: 0;
            position: relative;
            transform: rotateY(-180deg);
        }

        .pokemonImage img {
            backface-visibility: hidden;
        }

        .cursorHelp:hover {
            text-decoration: underline;
        }
    </style>
    @if (this.User.IsInRole("Admin"))
    {
        <style>
            .btn-group {
                margin: 10px 0 10px;
            }
        </style>
    }
}

@section scripts
{
    <script src="/js/pageLookup.js"></script>
    <script>
        var home = function() {
        	$('.front').css('z-index: 0')
        	$('.front').css('transform', 'rotateY(-180deg)')
        	$('.back').css('z-index: 1')
        	$('.back').css('transform', 'rotateY(0deg)')
        }

        var official = function() {
        	$('.back').css('z-index: 0')
        	$('.back').css('transform', 'rotateY(-180deg)')
        	$('.front').css('z-index: 1')
        	$('.front').css('transform', 'rotateY(0deg)')
        }

        $('.pokemonImage').on('click', function() {
            if ($($('.pokemonImage')).hasClass('home'))
            {
                official()
                $('.pokemonImage').removeClass('home')
            }
            else
            {
                home()
                $('.pokemonImage').addClass('home')
            }
        })

        $('span[title]').on('click', function() {
            alert($(this).attr('title'))
        })
    </script>
}

@Html.HiddenFor(x => x.LatestGenerationId)

<table class="surroundingPokemon pokemonPicture">
    <tr>
        <td class="previousPokemon">
            <table>
                <tr>
                    <td>
                        <a href="@this.Url.Action("Pokemon", "Home", new { name = Model.PokemonList.First().SurroundingPokemon[0].Name.Replace(": ", "_").Replace(' ', '_').ToLower() })">← </a>
                    </td>
                    <td>
                        <a href="@this.Url.Action("Pokemon", "Home", new { name = Model.PokemonList.First().SurroundingPokemon[0].Name.Replace(": ", "_").Replace(' ', '_').ToLower() })">
                            <img class="lightshadowed" title="@Model.PokemonList.First().SurroundingPokemon[0].Name" src="@Url.Content(string.Concat(@Model.PokemonList.First().AppConfig.WebUrl, @Model.PokemonList.First().AppConfig.OfficialPokemonImageUrl, @Model.PokemonList.First().SurroundingPokemon[0].Id, ".png"))" />
                        </a>
                    </td>
                </tr>
            </table>
        </td>
        <td class="nextPokemon">
            <table>
                <tr>
                    <td>
                        <a href="@this.Url.Action("Pokemon", "Home", new { name = Model.PokemonList.First().SurroundingPokemon[1].Name.Replace(": ", "_").Replace(' ', '_').ToLower() })">
                            <img class="lightshadowed" title="@Model.PokemonList.First().SurroundingPokemon[1].Name" src="@Url.Content(string.Concat(@Model.PokemonList.First().AppConfig.WebUrl, @Model.PokemonList.First().AppConfig.OfficialPokemonImageUrl, @Model.PokemonList.First().SurroundingPokemon[1].Id, ".png"))" />
                        </a>
                    </td>
                    <td>
                        <a href="@this.Url.Action("Pokemon", "Home", new { name = Model.PokemonList.First().SurroundingPokemon[1].Name.Replace(": ", "_").Replace(' ', '_').ToLower() })"> →</a>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>

<hr style="margin-top: 0;margin-bottom: 0;">
@{
    List<Evolution> evolutions = new List<Evolution>();
}
@foreach (var item in Model.PokemonList)
{
    @if(!item.Pokemon.IsComplete)
    {
        <h4>Please be aware that the information for this Pokémon is not complete due to not all the information being available. Some information may change as more is revealed.</h4>
    }

    string iconLink = Url.Content(string.Concat(item.AppConfig.WebUrl, item.AppConfig.FaviconImageUrl, item.Pokemon.Id, ".png"));
    generations = item.GamesAvailableIn.Select(x => x.GenerationId).Distinct().ToArray();
    if (this.User.IsInRole("Admin"))
    {
        adminPokemon.Pokemon = item.Pokemon;
    }
    
    <div class="generations@(@item.Pokemon.Id == @Model.PokemonId ? " active" : string.Empty)" id="@item.Pokemon.Name.Replace("%", string.Empty).Replace(".",string.Empty).Replace("'", string.Empty).Replace("(", string.Empty).Replace(")", string.Empty).Replace(" ", string.Empty)">
        @foreach(var g in item.GamesAvailableIn.Select(x => x.GenerationId).Distinct())
        {
            <button class="@(@g == @Model.GenerationId ? "active" : string.Empty)" onclick="lookupPokemon('@item.Pokemon.Name.Replace("%", string.Empty).Replace("'", string.Empty).Replace(".", string.Empty).Replace("(", string.Empty).Replace(")", string.Empty).Replace(" ", string.Empty)', '@iconLink', '@item.Pokemon.Name.Replace("'", "&apos;")', '@g')" id="Generation@(g)">Generation @(g)</button>
        }
    </div>

    @foreach(var g in generations)
    {
        preEvolution = null;
        evolutions = new List<Evolution>();
        if (item.PreEvolutions.OrderByDescending(x => x.GenerationId).Where(x => x.GenerationId <= g).Count() > 0)
        {
            preEvolution = item.PreEvolutions.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g);
        }
        if (item.Evolutions.OrderByDescending(x => x.GenerationId).Where(x => x.GenerationId <= g).Count() > 0)
        {
            foreach (var e in item.Evolutions.OrderByDescending(x => x.GenerationId).DistinctBy(x => x.EvolutionPokemonId))
            {
                if (item.Evolutions.OrderByDescending(x => x.GenerationId).Where(x => x.GenerationId <= g && x.EvolutionPokemonId == e.EvolutionPokemonId).Count() > 0)
                {
                    evolutions.Add(item.Evolutions.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g && x.EvolutionPokemonId == e.EvolutionPokemonId));
                }
            }
        }

        if (this.User.IsInRole("Admin"))
        {
            adminPokemon.GenerationId = g;
        }

        <div class="page generation@(g) pokemon@(@item.Pokemon.Id == @Model.PokemonId && @g == @Model.GenerationId ? " active" : string.Empty)" id="@item.Pokemon.Name.Replace("%", string.Empty).Replace(".",string.Empty).Replace("'", string.Empty).Replace("(", string.Empty).Replace(")", string.Empty).Replace(" ", string.Empty)">
            @if(Model.PokemonList.Count() > 1)
            {
                <div class="differentForms">
                    <h2 class="formHeader">Forms</h2>
                    @foreach (var button in Model.PokemonList.Where(x => x.Pokemon.Id != item.Pokemon.Id))
                    {
                        iconLink = Url.Content(string.Concat(button.AppConfig.WebUrl, button.AppConfig.FaviconImageUrl, button.Pokemon.Id, ".png"));
                        <div class="@button.Pokemon.Name">
                            <button onclick="lookupPokemon('@button.Pokemon.Name.Replace("%", string.Empty).Replace("'", string.Empty).Replace(".", string.Empty).Replace("(", string.Empty).Replace(")", string.Empty).Replace(" ", string.Empty)', '@iconLink', '@button.Pokemon.Name.Replace("'", "&apos;")', '@g')">
                                <img class="lightshadowed" title="@button.Pokemon.Name" src="@Url.Content(string.Concat(@button.AppConfig.WebUrl, @button.AppConfig.OfficialPokemonImageUrl, @button.Pokemon.Id, ".png"))" />
                            </button>
                        </div>
                    }
                </div>
            }
            <div class="pokemonInfo pokemonPicture pokemonTables shadowed@(Model.PokemonList.Count() > 1 ? " pokemonWithForms" : string.Empty)">
                <div class="pokemonImage">
                    <div class="front">
                        <img title="@item.Pokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, @item.Pokemon.Id, ".png"))" />
                        <h4>← 2D Artwork →</h4>
                    </div>
                    <div class="back">
                        <img title="@item.Pokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.HomePokemonImageUrl, @item.Pokemon.Id, ".png"))" />
                        <h4>← 3D Render→</h4>
                    </div>
                </div>

                @if(Model.PokemonList.Count() > 1)
                {
                    <div class="differentFormsMobile">
                        <h2>Different Forms</h2>
                        <div class="formButtons">
                            @foreach (var button in Model.PokemonList.Where(x => x.Pokemon.Id != item.Pokemon.Id))
                            {
                                iconLink = Url.Content(string.Concat(button.AppConfig.WebUrl, button.AppConfig.FaviconImageUrl, button.Pokemon.Id, ".png"));
                                <button onclick="lookupPokemon('@button.Pokemon.Name.Replace("%", string.Empty).Replace("'", string.Empty).Replace(".", string.Empty).Replace("(", string.Empty).Replace(")", string.Empty).Replace(" ", string.Empty)', '@iconLink', '@button.Pokemon.Name.Replace("'", "&apos;")', '@g')">
                                    <img class="lightshadowed" title="@button.Pokemon.Name" src="@Url.Content(string.Concat(@button.AppConfig.WebUrl, @button.AppConfig.OfficialPokemonImageUrl, @button.Pokemon.Id, ".png"))" />
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="pokemonInfo pokemonData pokemonTables">
                @if (this.User.IsInRole("Admin"))
                {
                    @await Html.PartialAsync("_AdminPokemonDropdown", adminPokemon)
                }
                <h2>Pokémon Data</h2>
                <table class="pokedexNumber">
                    <tbody>
                        <tr>
                            <th>Pokémon Name</th>
                            <td>
                                @item.Pokemon.Name
                            </td>
                        </tr>
                        <tr>
                            <th>Pokedex Number</th>
                            <td>@('#')@item.Pokemon.PokedexNumber.ToString().PadLeft(3, '0')</td>
                        </tr>
                        <tr>
                            <th>Classification</th>
                            <td>@item.Pokemon.Classification.Name</td>
                        </tr>
                        @if (item.LegendaryType != null)
                        {
                            <tr>
                                <th>Legendary Classification</th>
                                <td>@item.LegendaryType.Type</td>
                            </tr>
                        }
                        <tr>
                            <th>Height</th>
                            <td>
                                @{
                                    string height;

                                    if (item.Pokemon.Height != 0m)
                                    {
                                        var feet = 0;
                                        var inches = (int)Math.Round((@item.Pokemon.Height / 0.0254m), 0);
                                        while(inches >= 12)
                                        {
                                            feet++;
                                            inches -= 12;
                                        }

                                        height = string.Concat(feet, "'", inches.ToString("D2"), "\"", (item.Form != null && item.Form.Name.Contains("Gigantamax")) ? "+" : string.Empty, " (", @item.Pokemon.Height.ToString("F1"), (item.Form != null && item.Form.Name.Contains("Gigantamax")) ? "+" : string.Empty, " m)");
                                    }
                                    else
                                    {
                                        height = "???' ???\" (??? m)";
                                    }
                                }
                                @height
                            </td>
                        </tr>
                        <tr>
                            <th>Weight</th>
                            <td>
                                @{
                                    string weight;

                                    if (item.Pokemon.Weight != 0m)
                                    {
                                        weight = string.Concat(Math.Round(@item.Pokemon.Weight * (decimal)2.2046226, 1).ToString("0.####"), " lbs (", item.Pokemon.Weight.ToString("0.####"), " kg)");
                                    }
                                    else
                                    {
                                        weight = "??? lbs (??? kg)";
                                    }
                                }
                                @weight
                            </td>
                        </tr>
                        @if (g > 2)
                        {
                            <tr>
                                <th>
                                    @if (item.Abilities.Count() == 0 || item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryAbility == null && item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialEventAbility == null && (item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).HiddenAbility == null || g < 5))
                                    {
                                        @("Ability")
                                    }
                                    else
                                    {
                                        @("Abilities")
                                    }
                                </th>
                                <td>
                                    @if (@item.Abilities.Count() > 0)
                                    {
                                        <span class="cursorHelp" title="Ability Name: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryAbility.Name
Description: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryAbility.Description">
                                            @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryAbility.Name
                                        </span>
                                        @if (@item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryAbility != null)
                                        {
                                            <br>
                                            <span class="cursorHelp" title="Ability Name: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryAbility.Name
Description: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryAbility.Description">
                                                @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryAbility.Name
                                            </span>
                                        }
                                        @if (@item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).HiddenAbility != null && @g >= 5)
                                        {
                                            <br>
                                            <span class="cursorHelp" title="Ability Name: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).HiddenAbility.Name
Description: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).HiddenAbility.Description">
                                                @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).HiddenAbility.Name (Hidden)
                                            </span>
                                        }
                                        @if (@item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialEventAbility != null)
                                        {
                                            <br>
                                            <span class="cursorHelp" title="Ability Name: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialEventAbility.Name
Description: @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialEventAbility.Description">
                                                @item.Abilities.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialEventAbility.Name (Special Ability)
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        @("???")
                                    }
                                </td>
                            </tr>
                        }
                        @if (g != 1)
                        {
                            <tr>
                                <th>Gender Ratio</th>
                                <td>
                                    @if (item.Pokemon.GenderRatio.MaleRatio == 0 && item.Pokemon.GenderRatio.FemaleRatio == 0)
                                    {
                                        @("Genderless");
                                    }
                                    else
                                    {
                                        if (item.Pokemon.GenderRatio.FemaleRatio == 0)
                                        {
                                            <span class="maleRatio">@item.Pokemon.GenderRatio.MaleRatio@("% Male")</span>;
                                        }
                                        else if (item.Pokemon.GenderRatio.MaleRatio == 0)
                                        {
                                            <span class="femaleRatio">@item.Pokemon.GenderRatio.FemaleRatio@("% Female")</span>;
                                        }
                                        else
                                        {
                                            <span class="maleRatio">@item.Pokemon.GenderRatio.MaleRatio@("% Male")</span>
                                            @("/")
                                            <span class="femaleRatio">@item.Pokemon.GenderRatio.FemaleRatio@("% Female")</span>;
                                        }
                                    }
                                </td>
                            </tr>
                        }
                        <tr>
                            <th>
                                @if (item.Pokemon.Game.Name.IndexOf('/') > -1)
                                {
                                    @("Games of Origin");
                                }
                                else
                                {
                                    @("Game of Origin");
                                }
                            </th>
                            <td>
                                @String.Join(" / ", item.GamesAvailableIn.Where(x => x.ReleaseDate == item.Pokemon.Game.ReleaseDate).Select(x => x.Name))
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            @if (item.Typings.Count() > 0)
            {
                <div class="pokemonInfo pokemonTables">
                    <div class="typing">
                        <h2>Typing</h2>
                        <div class="pokemon-type type-icon type-@item.Typings.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryType.Name.ToLower()">@item.Typings.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryType.Name</div>
                        @if (@item.Typings.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryType != null)
                        {
                            <div class="pokemon-type type-icon type-@item.Typings.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryType.Name.ToLower()">@item.Typings.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryType.Name</div>
                        }
                    </div>
                    <div class="effectivenessChart tableWithHeaders noRowBorders">
                        @{
                            var typeChart = item.Effectiveness.OrderByDescending(x => x.Generation.Id).First(x => x.Generation.Id <= g).TypeChart;
                            List<string> StrongAgainst = new List<string>();
                            List<string> WeakAgainst = new List<string>();
                            List<string> ImmuneTo = new List<string>();
                            if (g == 1)
                            {
                                typeChart = typeChart.Where(x => x.GenerationId == 1).ToList();
                            }
                            else if (g >= 2 && g <= 5)
                            {
                                typeChart = typeChart.Where(x => x.GenerationId == 2).ToList();
                            }
                            else if (g >= 6)
                            {
                                typeChart = typeChart.Where(x => x.GenerationId == 6).ToList();
                            }

                            foreach(var t in typeChart)
                            {
                                if (t.Effective == 0)
                                {
                                    ImmuneTo.Add(t.Attack.Name);
                                }
                                else if (t.Effective == 0.5m && !ImmuneTo.Contains(t.Attack.Name))
                                {
                                    if (StrongAgainst.Contains(t.Attack.Name))
                                    {
                                        StrongAgainst = StrongAgainst.Select(x => x.Replace(t.Attack.Name, t.Attack.Name + " Quad")).ToList();
                                    }
                                    else if (WeakAgainst.Contains(t.Attack.Name))
                                    {
                                        WeakAgainst.Remove(t.Attack.Name);
                                    }
                                    else
                                    {
                                        StrongAgainst.Add(t.Attack.Name);
                                    }
                                }
                                else if (t.Effective == 2 && !ImmuneTo.Contains(t.Attack.Name))
                                {
                                    if (WeakAgainst.Contains(t.Attack.Name))
                                    {
                                        WeakAgainst = WeakAgainst.Select(x => x.Replace(t.Attack.Name, t.Attack.Name + " Quad")).ToList();
                                    }
                                    else if (StrongAgainst.Contains(t.Attack.Name))
                                    {
                                        StrongAgainst.Remove(t.Attack.Name);
                                    }
                                    else
                                    {
                                        WeakAgainst.Add(t.Attack.Name);
                                    }
                                }
                            }

                            StrongAgainst.Sort();
                            WeakAgainst.Sort();
                            ImmuneTo.Sort();

                            var superStrong = StrongAgainst.Where(x => x.Contains("Quad")).ToList();
                            foreach(var s in superStrong)
                            {
                                StrongAgainst.Remove(StrongAgainst.Find(x => x == s));
                            }
                            superStrong.AddRange(StrongAgainst);
                            StrongAgainst = superStrong;

                            var superWeak = WeakAgainst.Where(x => x.Contains("Quad")).ToList();
                            foreach(var s in superWeak)
                            {
                                WeakAgainst.Remove(WeakAgainst.Find(x => x == s));
                            }
                            superWeak.AddRange(WeakAgainst);
                            WeakAgainst = superWeak;
                        }
                        @if (StrongAgainst.Count > 0)
                        {
                            <div class="StrongAgainst">
                                <h2>Resistances</h2>
                                <table class="StrongAgainstTable">
                                    <tbody>
                                        @foreach (string s in StrongAgainst)
                                        {
                                            <tr>
                                                @if (@s.IndexOf(" Quad") > -1)
                                                {
                                                    <td>
                                                        <div class="pokemon-type type-icon type-@s.ToLower().Substring(0, @s.IndexOf(" Quad"))">@s.Substring(0, @s.IndexOf(" Quad"))</div>
                                                        <div class="pokemon-type quad-icon quad-resist">Quad</div>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <div class="pokemon-type type-icon type-@s.ToLower()">@s</div>    
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            style = string.Empty;
                        }
                        else
                        {
                            style = "display: flex;";
                        }
                        <div style="@style" class="nonResistances">
                            @if (WeakAgainst.Count > 0)
                            {
                                <div class="WeakAgainst">
                                    <h2>Weaknesses</h2>
                                    <table class="WeakAgainstTable">
                                        <tbody>
                                            @foreach (string w in WeakAgainst)
                                            {
                                                <tr>
                                                    @if (@w.IndexOf(" Quad") > -1)
                                                    {
                                                        <td>
                                                            <div class="pokemon-type type-icon type-@w.ToLower().Substring(0, @w.IndexOf(" Quad"))">@w.Substring(0, @w.IndexOf(" Quad"))</div>
                                                            <div class="pokemon-type quad-icon quad-weak">Quad</div>
                                                        </td>
                                                    }
                                                    else
                                                    {
                                                        <td>
                                                            <div class="pokemon-type type-icon type-@w.ToLower()">@w</div>
                                                        </td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            @if (ImmuneTo.Count > 0)
                            {
                                <div class="ImmuneTo">
                                    <h2>Immunities</h2>
                                    <table class="ImmuneToTable">
                                        <tbody>
                                            @foreach (string i in ImmuneTo)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="pokemon-type type-icon type-@i.ToLower()">@i</div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="pokemonInfo pokemonGames pokemonTables">
                <h2>Games Available In</h2>
                <table>
                    <tbody>
                        @{
                            var gamesAvailableInInGeneration = @item.GamesAvailableIn.Where(x => g == x.GenerationId).OrderBy(x => x.ReleaseDate).ThenBy(x => x.Id).ToList();
                            var gamesAvailableInReleaseDates = gamesAvailableInInGeneration.Select(x => x.ReleaseDate).Distinct().ToArray();
                        }
                        @for (var i = 0; i < gamesAvailableInReleaseDates.Count(); i+=2)
                        {
                            var gameList = gamesAvailableInInGeneration.Where(x => x.ReleaseDate == gamesAvailableInReleaseDates[i]).ToList();
                            <tr>
                                <td>
                                    @for(var j = 0; j < gameList.Count(); j++)
                                    {
                                        @if (j > 0)
                                        {
                                            @(" / ")
                                        }
                                        @gameList[j].Name
                                    }
                                </td>
                                @if (@gamesAvailableInReleaseDates.Last() != @gamesAvailableInReleaseDates[i])
                                {
                                    gameList = gamesAvailableInInGeneration.Where(x => x.ReleaseDate == gamesAvailableInReleaseDates[i+1]).ToList();
                                    <td>
                                        @for(var j = 0; j < gameList.Count(); j++)
                                        {
                                            @if (j > 0)
                                            {
                                                @(" / ")
                                            }
                                            @gameList[j].Name
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="pokemonInfo pokemonTraining pokemonTables">
                <h2>Training</h2>
                <table>
                    <tbody>
                        @if (@g > 2 && item.EVYields.Count() > 0)
                        {
                            <tr>
                                <th>EV Yield</th>
                                <td>
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Health != 0)
                                    {
                                        @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Health@(" Health");
                                        <br>
                                    }
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Attack != 0)
                                    {
                                        @if (item.Pokemon.Name == "Watchog" && @g == 5)
                                        {
                                            @("1 Attack in BW")
                                            <br>
                                            @("2 Attack in B2W2")
                                        }
                                        else
                                        {
                                            @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Attack@(" Attack");
                                        }
                                        <br>
                                    }
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Defense != 0)
                                    {
                                        @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Defense@(" Defense");
                                        <br>
                                    }
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialAttack != 0)
                                    {
                                        @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialAttack@(" Sp. Attack");
                                        <br>
                                    }
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialDefense != 0)
                                    {
                                        @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialDefense@(" Sp. Defense");
                                        <br>
                                    }
                                    @if (item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Speed != 0)
                                    {
                                        @item.EVYields.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Speed@(" Speed");
                                        <br>
                                    }
                                </td>
                            </tr>
                        }
                        @if(item.CaptureRates.Count() > 0)
                        {
                            <tr>
                                <th>Catch Rate</th>
                                <td class="catchRate">@item.CaptureRates.Find(x => x.PokemonId == @item.Pokemon.Id && x.GenerationId <= g).CaptureRate.CatchRate</td>
                            </tr>
                        }
                        <tr>
                            <th>Experience Growth</th>
                            <td>
                                @item.Pokemon.ExperienceGrowth.Name
                                <br>
                                (@item.Pokemon.ExperienceGrowth.ExpPointTotal XP)
                            </td>
                        </tr>
                        @if(item.BaseHappinesses.Count() > 0)
                        {
                            <tr>
                                <th>Base Happiness</th>
                                <td>@item.BaseHappinesses.Find(x => x.PokemonId == @item.Pokemon.Id && x.GenerationId <= g).BaseHappiness.Happiness</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="pokemonInfo pokemonStats pokemonTables">
                @if(item.BaseStats.Count() > 0)
                {
                    <h2>Base Stats</h2>
                    <table class="baseStatTable">
                        <tbody>
                            <tr>
                                <th class="Health" scope="col">Health</th>
                                <td class="statData"><div class="health statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Health * 100 / 255m)%;"></div></td>
                                <td class="Health">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Health</td>
                            </tr>
                            <tr>
                                <th class="Attack" scope="col">Attack</th>
                                <td class="statData"><div class="attack statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Attack * 100 / 255m)%;"></div></td>
                                <td class="Attack">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Attack</td>
                            </tr>
                            <tr>
                                <th class="Defense" scope="col">Defense</th>
                                <td class="statData"><div class="defense statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Defense * 100 / 255m)%;"></div></td>
                                <td class="Defense">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Defense</td>
                            </tr>
                            <tr>
                                <th class="SpecialAttack" scope="col">
                                    @if (@g == 1)
                                    {
                                        @("Special")
                                    }
                                    else
                                    {
                                        @("Sp. Attack")
                                    }
                                </th>
                                <td class="statData"><div class="specialAttack statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialAttack * 100 / 255m)%;"></div></td>
                                <td class="SpecialAttack">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialAttack</td>
                            </tr>
                            @if (@g != 1)
                            {
                                <tr>
                                    <th class="SpecialDefense" scope="col">Sp. Defense</th>
                                    <td class="statData"><div class="specialDefense statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialDefense * 100 / 255m)%;"></div></td>
                                    <td class="SpecialDefense">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SpecialDefense</td>
                                </tr>
                            }
                            <tr>
                                <th class="Speed" scope="col">Speed</th>
                                <td class="statData"><div class="speed statBar" style="width: @(@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Speed * 100 / 255m)%;"></div></td>
                                <td class="Speed">@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).Speed</td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th class="baseStatTotal" scope="col">Total</th>
                                <td colspan="2" class="baseStatTotal"><b>@item.BaseStats.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).StatTotal</b></td>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
            @if (g != 1 || (preEvolution != null && g >= preEvolution.PreevolutionPokemon.Game.GenerationId))
            {
                <div class="pokemonInfo pokemonBreedingAndEvos pokemonTables">
                    @if (preEvolution != null && g >= preEvolution.PreevolutionPokemon.Game.GenerationId)
                    {
                        <div class="evolutions">
                            <h2>
                                @if (item.Pokemon.Id == 612)
                                {
                                    @("Pre-Evolutions");
                                }
                                else
                                {
                                    @("Pre-Evolution");
                                }
                            </h2>
                            <table class="preEvolutionTable">
                                <tbody class="evolutionPokemon">
                                    <tr>
                                        <th>
                                            @if (@preEvolution.PreevolutionPokemon.Name.Contains(" ("))
                                            {
                                                <a class="evolutionImage" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = preEvolution.PreevolutionPokemon.Name.Substring(0, preEvolution.PreevolutionPokemon.Name.IndexOf(" (")).Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = preEvolution.PreevolutionPokemonId, generationId = @g })">
                                                    <img class="lightshadowed" title="@preEvolution.PreevolutionPokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, @preEvolution.PreevolutionPokemon.Id, ".png"))" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a class="evolutionImage" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = preEvolution.PreevolutionPokemon.Name.Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = preEvolution.PreevolutionPokemonId, generationId = @g })">
                                                    <img class="lightshadowed" title="@preEvolution.PreevolutionPokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, @preEvolution.PreevolutionPokemon.Id, ".png"))" />
                                                </a>
                                            }
                                        </th>
                                        <td>
                                            @if (@preEvolution.PreevolutionPokemon.Name.Contains(" ("))
                                            {
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = preEvolution.PreevolutionPokemon.Name.Substring(0, preEvolution.PreevolutionPokemon.Name.IndexOf(" (")).Substring(0, preEvolution.PreevolutionPokemon.Name.IndexOf(" (")).Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = preEvolution.PreevolutionPokemonId, generationId = @g })">@preEvolution.PreevolutionPokemon.Name</a>
                                            }
                                            else
                                            {
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = preEvolution.PreevolutionPokemon.Name.Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = preEvolution.PreevolutionPokemonId, generationId = @g })">@preEvolution.PreevolutionPokemon.Name</a>
                                            }
                                            <p>@preEvolution.EvolutionMethod.Name@(@preEvolution.EvolutionDetails != null ? string.Concat(" (", @preEvolution.EvolutionDetails, ")") : string.Empty)</p>
                                        </td>
                                    </tr>
                                    @if (item.Pokemon.Id == 612)
                                    {
                                        <tr>
                                            <th>
                                                <a class="evolutionImage" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "burmy", pokemonId = 1645, generationId = @g })">
                                                    <img class="lightshadowed" title="Burmy" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, "1645.png"))" />
                                                </a>
                                            </th>
                                            <td>
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "burmy", pokemonId = 1645, generationId = @g })">Burmy (Sandy)</a>
                                                <p>Level Up (Level 20 When Male)</p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>
                                                <a class="evolutionImage" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "burmy", pokemonId = 1646, generationId = @g })">
                                                    <img class="lightshadowed" title="Burmy" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, "1646.png"))" />
                                                </a>
                                            </th>
                                            <td>
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "burmy", pokemonId = 1646, generationId = @g })">Burmy (Trash)</a>
                                                <p>Level Up (Level 20 When Male)</p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <br class="preEvoBreak">
                    }
                    @if (@g != 1 && item.EggGroups.Count() > 0 && item.Pokemon.Id != 612)
                    {
                        <div class="pokemonBreeding">
                            <h2>Breeding</h2>
                            <table>
                                <tbody>
                                    <tr>
                                        @if (item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup != null)
                                        {
                                            <th>Egg Groups</th>
                                        }
                                        else
                                        {
                                            <th>Egg Group</th>
                                        }
                                        <td>
                                            @item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryEggGroup.Name
                                            @if (item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup != null)
                                            {
                                                <br>
                                                @item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup.Name
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                       <th>Egg Cycles</th>
                                       <td>
                                           @item.Pokemon.EggCycle.CycleCount Cycles
                                           <br>
                                           (@(item.Pokemon.EggCycle.CycleCount * 257)-@(item.Pokemon.EggCycle.CycleCount * 257 + 256) Steps to Hatch)
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                @if (@g != 1 && item.EggGroups.Count() > 0 && item.Pokemon.Id == 612)
                {
                    <div class="pokemonBreeding">
                        <h2>Breeding</h2>
                        <table>
                            <tbody>
                                <tr>
                                    @if (item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup != null)
                                    {
                                        <th>Egg Groups</th>
                                    }
                                    else
                                    {
                                        <th>Egg Group</th>
                                    }
                                    <td>
                                        @item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).PrimaryEggGroup.Name
                                        @if (item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup != null)
                                        {
                                            <br>
                                            @item.EggGroups.OrderByDescending(x => x.GenerationId).First(x => x.GenerationId <= g).SecondaryEggGroup.Name
                                        }
                                    </td>
                                </tr>
                                <tr>
                                   <th>Egg Cycles</th>
                                   <td>
                                       @item.Pokemon.EggCycle.CycleCount Cycles
                                       <br>
                                       (@(item.Pokemon.EggCycle.CycleCount * 257)-@(item.Pokemon.EggCycle.CycleCount * 257 + 256) Steps to Hatch)
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
            }
            @if (evolutions.Count() > 0)
            {
                <div class="pokemonInfo pokemonEvos pokemonTables evolutions">
                    <h2>
                        @if (evolutions.Count() > 1 || (item.Pokemon.PokedexNumber == 412 && item.Pokemon.Id != 610))
                        {
                            @("Evolutions");
                        }
                        else
                        {
                            @("Evolution");
                        }
                    </h2>
                    <table class="evolutionTable">
                        <tbody class="evolutionPokemon">
                            @foreach (var evolution in evolutions.OrderBy(x => x.EvolutionPokemon.PokedexNumber).ThenBy(x => x.EvolutionPokemon.Id))
                            {
                                if (g >= evolution.EvolutionPokemon.Game.GenerationId)
                                {
                                    <tr>
                                        <th>
                                            @if (@evolution.EvolutionPokemon.Name.Contains(" ("))
                                            {
                                                <a class="evolutionImage"  href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = evolution.EvolutionPokemon.Name.Substring(0, evolution.EvolutionPokemon.Name.IndexOf(" (")).Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = evolution.EvolutionPokemonId, generationId = @g })">
                                                    <img class="lightshadowed" title="@evolution.EvolutionPokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, @evolution.EvolutionPokemon.Id, ".png"))" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a class="evolutionImage"  href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = evolution.EvolutionPokemon.Name.Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = evolution.EvolutionPokemonId, generationId = @g })">
                                                    <img class="lightshadowed" title="@evolution.EvolutionPokemon.Name" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, @evolution.EvolutionPokemon.Id, ".png"))" />
                                                </a>
                                            }
                                        </th>
                                        <td>
                                            @if (@evolution.EvolutionPokemon.Name.Contains(" ("))
                                            {
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = evolution.EvolutionPokemon.Name.Substring(0, evolution.EvolutionPokemon.Name.IndexOf(" (")).Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = evolution.EvolutionPokemonId, generationId = @g })">@evolution.EvolutionPokemon.Name</a>
                                            }
                                            else
                                            {
                                                <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = evolution.EvolutionPokemon.Name.Replace(": ", "_").Replace(' ', '_').ToLower(), pokemonId = evolution.EvolutionPokemonId, generationId = @g })">@evolution.EvolutionPokemon.Name</a>
                                            }
                                            <p>@evolution.EvolutionMethod.Name@(evolution.EvolutionDetails != null ? string.Concat(" (", @evolution.EvolutionDetails, ")") : string.Empty)</p>
                                        </td>
                                    </tr>
                                }
                            }
                            @if (item.Pokemon.PokedexNumber == 412 && item.Pokemon.Id != 610)
                            {
                                <tr>
                                    <th>
                                        <a class="evolutionImage"  href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "mothim", pokemonId = 612, generationId = @g })">
                                            <img class="lightshadowed" title="Mothim" src="@Url.Content(string.Concat(@item.AppConfig.WebUrl, @item.AppConfig.OfficialPokemonImageUrl, "612.png"))" />
                                        </a>
                                    </th>
                                    <td>
                                        <a class="evolutionLink" href="@this.Url.Action("PokemonWithId", "Home", new { pokemonName = "mothim", pokemonId = 612, generationId = @g })">Mothim</a>
                                        <p>Level Up (Level 20 When Male)</p>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="pokemonInfo pokemonTables emptyDiv"></div>
            }

            @if (g == 1 || !(preEvolution != null && g >= preEvolution.PreevolutionPokemon.Game.GenerationId))
            {
                <div class="pokemonInfo pokemonTables emptyDiv"></div>
            }
        </div>
    }
}