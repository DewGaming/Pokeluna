@addTagHelper "*, Microsoft.AspNetCore.Mvc.TagHelpers"
@model Pokedex.Models.PokemonLocationDetailViewModel
@{
    Layout = "_layout";
    string columnWidth = string.Empty;
}

@section styles
{
    <style>
        label {
            margin-left: -15px;
        }

        .row {
            margin-left: 0 !important;
            margin-right: 0 !important;
        }

        #tickmarks {
            display: flex;
            justify-content: space-between;
            padding: 0 10px;
        }

        #tickmarks p {
            position: relative;
            display: flex;
            justify-content: center;
            text-align: center;
            width: 1px;
            background: #D3D3D3;
            height: 10px;
            line-height: 40px;
            margin: 0 0 20px 0;
        }
    </style>
}

@section scripts
{
    <script>
        $('#minLevelVal').text($('.minLevelSlider').val());
        $('#maxLevelVal').text($('.maxLevelSlider').val());
        $('#chanceOfEncounterVal').text($('.chanceOfEncounterSlider').val() + '%');

        $('.minLevelSlider').on('input', function () {
            $('#minLevelVal').text($(this).val());
        });
        $('.maxLevelSlider').on('input', function () {
            $('#maxLevelVal').text($(this).val());
        });
        $('.chanceOfEncounterSlider').on('input', function () {
            $('#chanceOfEncounterVal').text($(this).val() + '%');
        });
    </script>
}

<h2>Update Pokemon Availability</h2>

<div class="form-horizontal">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        @Html.ValidationSummary()

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.LocationId)

        <div class="form-group row">
            <div class="form-group row col-md-4">
                @Html.LabelFor(x => x.PokemonId, new { @class = "col-md-8" })
                @Html.DropDownListFor(x => x.PokemonId, new SelectList(Model.AllPokemon, "Id", "Name"), "", new { @class = "form-control col-md-11" })
                @Html.ValidationMessageFor(x => x.PokemonId)
            </div>

            <div class="minimumLevelBar form-group row col-md-4">
                <label for="MinimumLevel" class="col-md-8">Minimum Level: <span id="minLevelVal"></span></label>
                <input class="minLevelSlider slider col-md-11" data-val-required="The Minimum Level field is required." id="MinimumLevel" name="MinimumLevel" type="range" min="1" max="100" value=@Model.MinimumLevel list="tickmarks">
                <div class="col-md-11" id="tickmarks">
                    <p>1</p>
                    <p>10</p>
                    <p>20</p>
                    <p>30</p>
                    <p>40</p>
                    <p>50</p>
                    <p>60</p>
                    <p>70</p>
                    <p>80</p>
                    <p>90</p>
                    <p>100</p>
                </div>
            </div>

            <div class="maximumLevelBar form-group row col-md-4">
                <label for="MaximumLevel" class="col-md-8">Maximum Level: <span id="maxLevelVal"></span></label>
                <input class="maxLevelSlider slider col-md-11" data-val-required="The Health field is required." id="MaximumLevel" name="MaximumLevel" type="range" min="1" max="100" value=@Model.MaximumLevel list="tickmarks">
                <div class="col-md-11" id="tickmarks">
                    <p>1</p>
                    <p>10</p>
                    <p>20</p>
                    <p>30</p>
                    <p>40</p>
                    <p>50</p>
                    <p>60</p>
                    <p>70</p>
                    <p>80</p>
                    <p>90</p>
                    <p>100</p>
                </div>
            </div>
        </div>

        <div class="form-group row">
            @if (Model.Region.Name == "Kanto" || Model.Region.Name == "Orre" || Model.Region.Name == "Alola")
            {
                columnWidth = "col-md-4";
            }
            else
            {
                columnWidth = "col-md-6";
            }

            <div class="form-group row @columnWidth">
                @Html.LabelFor(x => x.CaptureMethodId, new { @class = "col-md-8" })
                @Html.DropDownListFor(x => x.CaptureMethodId, new SelectList(Model.AllCaptureMethods, "Id", "Name"), "", new { @class = "form-control col-md-11" })
                @Html.ValidationMessageFor(x => x.CaptureMethodId)
            </div>

            <div class="chanceOfEncounterBar form-group row @columnWidth">
                <label for="ChanceOfEncounter" class="col-md-8">Chance of Encounter: <span id="chanceOfEncounterVal"></span></label>
                <input class="chanceOfEncounterSlider slider col-md-11" data-val-required="The Health field is required." id="ChanceOfEncounter" name="ChanceOfEncounter" type="range" min="0" max="100" value=@Model.ChanceOfEncounter list="tickmarks">
                <div class="col-md-11" id="tickmarks">
                    <p>0</p>
                    <p>10</p>
                    <p>20</p>
                    <p>30</p>
                    <p>40</p>
                    <p>50</p>
                    <p>60</p>
                    <p>70</p>
                    <p>80</p>
                    <p>90</p>
                    <p>100</p>
                </div>
            </div>

            @if (Model.Region.Name == "Kanto")
            {
                <div class="form-group row @columnWidth">
                    @Html.LabelFor(x => x.SpecialSpawn, new { @class = "col-md-12" })
                    @Html.CheckBoxFor(x => x.SpecialSpawn, new { @class = "form-control col-md-9" })
                    @Html.ValidationMessageFor(x => x.SpecialSpawn)
                </div>
            }
            else if (Model.Region.Name == "Orre")
            {
                <div class="form-group row @columnWidth">
                    @Html.LabelFor(x => x.FailedSnag, new { @class = "col-md-12" })
                    @Html.CheckBoxFor(x => x.FailedSnag, new { @class = "form-control col-md-9" })
                    @Html.ValidationMessageFor(x => x.FailedSnag)
                </div>
            }
            else if (Model.Region.Name == "Alola")
            {
                <div class="form-group row @columnWidth">
                    @Html.LabelFor(x => x.SOSBattleOnly, new { @class = "col-md-12" })
                    @Html.CheckBoxFor(x => x.SOSBattleOnly, new { @class = "form-control col-md-9" })
                    @Html.ValidationMessageFor(x => x.SOSBattleOnly)
                </div>
            }
        </div>

        <p>
            <button type="submit" class="btn btn-primary" role="button">Update</button>
        </p>
    }

</div>