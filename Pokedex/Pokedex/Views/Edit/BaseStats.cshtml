@model Pokedex.DataAccess.Models.BaseStat

<h2>Update Base Stat For @Model.Pokemon.Name</h2>

<div class="form-horizontal">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        @Html.ValidationSummary()

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.PokemonId)

        <div class="form-group row">
            @Html.LabelFor(x => x.Health, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.Health, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.Health)
        </div>

        <div class="form-group row">
            @Html.LabelFor(x => x.Attack, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.Attack, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.Attack)
        </div>

        <div class="form-group row">
            @Html.LabelFor(x => x.Defense, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.Defense, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.Defense)
        </div>

        <div class="form-group row">
            @Html.LabelFor(x => x.SpecialAttack, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.SpecialAttack, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.SpecialAttack)
        </div>

        <div class="form-group row">
            @Html.LabelFor(x => x.SpecialDefense, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.SpecialDefense, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.SpecialDefense)
        </div>

        <div class="form-group row">
            @Html.LabelFor(x => x.Speed, new { @class = "col-md-2" })
            @Html.EditorFor(x => x.Speed, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control col-md-8" } })
            @Html.ValidationMessageFor(x => x.Speed)
        </div>

        <p>
            <button type="submit" class="btn btn-primary" role="button">Update</button>
        </p>
    }

</div>